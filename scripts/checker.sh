#!/usr/bin/env bash
#     ____                  __        ____
#    / __ \____ ___________/ /_____ _/ / /
#   / /_/ / __ `/ ___/ ___/ __/ __ `/ / /
#  / ____/ /_/ / /__(__  ) /_/ /_/ / / /
# /_/    \__,_/\___/____/\__/\__,_/_/_/
#
# Copyright (C) 2020-present
#
# This file is part of Pacstall
#
# Pacstall is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License
#
# Pacstall is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Pacstall. If not, see <https://www.gnu.org/licenses/>.

# @description
#   Checks for updates to packages from the Pacsite API.
#   If updates are found, returns a git description to be
#   logged, and updates the database file with the new data.
# @ci
#
# @example
#   check_updates packages.json
# @args
#    $1 string The package database file.
function check_updates() {
  local pkgfile="${1}" packages details updated stored
  mapfile -t packages < <(jq -r 'keys[]' "${pkgfile}")
  for i in "${packages[@]}"; do
    updated="$(curl -fsSL https://pacstall.dev/api/packages/${i} | jq -r '.lastUpdatedAt')"
    stored="$(jq -r --arg pkg ${i} '.[$pkg].lastUpdatedAt' ${pkgfile})"
    if [[ "${updated}" > "${stored}" ]]; then
      jq --arg pkg "${i}" --arg time "${updated}" \
        '.[$pkg].lastUpdatedAt = $time' "${pkgfile}" > tmp.json && mv tmp.json "${pkgfile}"
      details+=("${i}: ${stored} -> ${updated}")
    fi
  done
  if [[ -z ${details[*]} ]]; then
    echo "No PPR updates found."
  else
    echo -e "### Auto-generated by CI. DO NOT EDIT ###\nUpdate $(date -u +"%Y-%m-%dT%H:%M:%SZ"):"
    printf '  %s\n' "${details[@]}"
  fi
}

# @description
#   Checks a bound local aptly repo API for overflow
#   versions of a package. Returns any packages to be
#   removed to make space for an incoming build.
# @ci
#
# @example
#   check_overflow foobar main amd64 5 \
#     http://localhost:1234/api/repos/ppr-main/packages
# @args
#    $1 string The package to check overflow of.
#    $2 string The component repo to check.
#    $3 string The architecture to check.
#    $4 int    The maximum number of packages allowed.
#    $5 string The local API url.
function check_overflow() {
  local package="${1}" repo="${2}" architecture="${3}" max="${4}" url="${5}" responses matches removes remove_ref
  mapfile -t responses < <(curl -s "${url}?q=${package}" | jq -r ".[]" | sort -r)
  for i in "${responses[@]}"; do
    [[ "${i}" == "P${architecture}"* ]] && matches+=("${i}")
  done
  if ((${#matches[@]}>=max)); then
    for i in "${!matches[@]}"; do
      ((i>=max-1)) && removes+=("${matches[${i}]}")
    done
  fi
  if [[ -n ${removes[*]} ]]; then
    printf -v remove_ref '\"%s\",' "${removes[@]}"
    echo "${remove_ref%,}"
  fi
}

case ${1} in
  updates) shift 1; check_updates "${1:?PKGFILE required}" ;;
  overflow) shift 1; check_overflow "${1:?need PKG}" "${2:?need REPO}" "${3:?need ARCH}" "${4:?need MAX}" "${5:?need URL}" ;;
  *) echo "Usage: ${0} updates|overflow"; exit 1 ;;
esac
